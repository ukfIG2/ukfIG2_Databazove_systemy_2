******************SQL 1***********************
01. SELECT customers.contactLastName AS Priezvisko, customers.contactFirstName AS Meno FROM `payments`
        INNER JOIN customers ON payments.customerNumber = customers.customerNumber
        WHERE amount = (SELECT MAX(amount) from payments)
            #ORDER BY amount DESC
            #LIMIT 1;

02. SELECT * FROM products
        WHERE buyPrice > (
        SELECT AVG(buyPrice) FROM `products`);

03. SELECT * FROM payments WHERE amount > (
        SELECT amount AS Suma FROM `payments`
        WHERE customerNumber = 250
        ORDER BY amount DESC
        LIMIT 1)
        ORDER BY amount ASC;

04. SELECT * FROM payments
        WHERE paymentDate > ANY (
            SELECT paymentDate
            FROM payments
            WHERE customerNumber = 250
        )
        ORDER BY amount ASC;

05. SELECT *    FROM payments
        WHERE paymentDate > ALL (
            SELECT paymentDate
            FROM payments
            WHERE customerNumber = 250
        )
        ORDER BY amount ASC;

06. SELECT customerName AS PriezviskoMeno, country AS Krajina, creditLimit AS LimitKreditu
        FROM customers
        WHERE creditLimit > (
            SELECT AVG(creditLimit)
            FROM customers AS c2
            WHERE c2.country = customers.country
        );

07. SELECT employees.firstName, employees.lastName FROM employees
        WHERE reportsTo = (
            SELECT reportsTo FROM employees
            WHERE  employeeNumber = 1337
        ) AND officeCode = (SELECT officeCode FROM employees
            WHERE employeeNumber = 1337
        ) AND employeeNumber != 1337;

08. SELECT firstName, lastName FROM employees
        WHERE reportsTo = ( SELECT reportsTo FROM employees
            WHERE employeeNumber IN (1611, 1612) LIMIT 1 )
        AND officeCode = ( SELECT officeCode FROM employees
            WHERE employeeNumber IN (1611, 1612) LIMIT 1 )
        AND employeeNumber NOT IN (1611, 1612);

09. SELECT employeeNumber, firstName, lastName, jobTitle AS Pozicia FROM employees
        WHERE jobTitle = (SELECT jobTitle FROM  employees
            WHERE employeeNumber = 1621);

10. SELECT products.productName AS NazovTovaru, products.buyPrice AS NakupnaCena FROM products
        INNER JOIN productlines ON products.productLine = productlines.productLine
        WHERE products.buyPrice > ( SELECT AVG(buyPrice) FROM products AS p2
            WHERE p2.productLine = products.productLine );

11. SELECT country FROM customers
        GROUP BY country
        HAVING AVG(creditLimit) > (
            SELECT AVG(creditLimit) FROM customers
            WHERE country IN ('USA', 'Japan')
        );

12. SELECT DISTINCT customers.contactFirstName, customers.contactLastName FROM orders
        INNER JOIN orderdetails USING(orderNumber)
        INNER JOIN customers ON orders.customerNumber = customers.customerNumber
        WHERE orderNumber = (
                SELECT orderNumber FROM orderdetails
                GROUP BY orderNumber
                ORDER BY SUM(quantityOrdered * priceEach) DESC
                LIMIT 1
        );

13. SELECT /*officeCode,*/ COUNT(employeeNumber) AS Pocet FROM `employees`
        GROUP BY officeCode
        ORDER BY Pocet DESC
        LIMIT 1;

    SELECT MAX(employee_count) AS max_employees FROM(
        SELECT officeCode,*COUNT(employeeNumber) AS Pocet FROM `employees`
        GROUP BY officeCode)

14. SELECT orderDate, COUNT(orderNumber) AS Pocet FROM `orders`
        GROUP BY orderDate
        ORDER BY Pocet DESC
        LIMIT 1;

15. SELECT productCode, MAX(priceEach) FROM `orderdetails`
        GROUP BY productCode;

******************SQL 2************************************

01. SELECT AVG(Pocet) AS Priemer
        FROM (
            SELECT orderNumber, COUNT(*) AS Pocet
            FROM orderdetails
            GROUP BY orderNumber
        ) AS subquery;

02.     SELECT c.customerName AS MenoZakaznika, o.orderNumber AS CisloObjednavky,
                CASE WHEN o.comments IS NOT NULL THEN 'áno' ELSE 'nie' END AS PridalKoment
                FROM customers c
                JOIN orders o ON c.customerNumber = o.customerNumber;

03.     SELECT COUNT(*) AS PocetAno
                FROM (
                SELECT c.customerName AS MenoZakaznika, o.orderNumber AS CisloObjednavky,
                        CASE WHEN o.comments IS NOT NULL THEN 'áno' ELSE 'nie' END AS PridalKoment
                FROM customers c
                JOIN orders o ON c.customerNumber = o.customerNumber
                ) AS Subquery
                WHERE PridalKoment = 'áno';

04.     SELECT orders.status AS Status_objednavky, COUNT(*) AS Pocet_objednavok,
                (COUNT(*) * 100 / (SELECT COUNT(*) FROM orders)) AS Percentualny_podiel FROM orders
                GROUP BY Status_objednavky
                UNION
        SELECT 'All' AS Status_objednavky, COUNT(*) AS Pocet_objednavok, 100.0 AS Percentualny_podiel FROM orders;

05.     SELECT e.employeeNumber AS EmployeeID, e.lastName AS LastName, e.firstName AS FirstName,
                COUNT(subordinate.employeeNumber) AS PocetPodriadenych FROM employees e
                LEFT JOIN employees subordinate ON e.employeeNumber = subordinate.reportsTo
                GROUP BY e.employeeNumber, e.lastName, e.firstName;

06.     SELECT c.customerNumber, c.customerName,
                SUM(CASE WHEN YEAR(p.paymentDate) = 2003 THEN p.amount ELSE 0 END) AS Platba_2003,
                SUM(CASE WHEN YEAR(p.paymentDate) = 2004 THEN p.amount ELSE 0 END) AS Platba_2004,
                SUM(CASE WHEN YEAR(p.paymentDate) = 2005 THEN p.amount ELSE 0 END) AS Platba_2005
                FROM customers c
                JOIN payments p ON c.customerNumber = p.customerNumber
                WHERE YEAR(p.paymentDate) IN (2003, 2004, 2005)
                GROUP BY c.customerNumber, c.customerName;

07.     CREATE VIEW NajpredavanejsieProdukty AS
                SELECT p.productCode, p.productName, SUM(od.quantityOrdered) AS Pocet FROM orderdetails od
                INNER JOIN orders o USING(orderNumber)
                INNER JOIN products p USING(productCode)
                WHERE o.status = 'Shipped'
                GROUP BY p.productCode, p.productName
                ORDER BY Pocet DESC
                LIMIT 10;

08.     SELECT * FROM NajpredavanejsieProdukty;

09.     SELECT '2_adresy' AS Typ_adries, COUNT(CASE WHEN addressLine1 IS NOT NULL AND addressLine2 IS NOT NULL THEN 1 END) AS Pocet_zakaznikov
                FROM customers
                UNION
                SELECT '1_adresa' AS Typ_adries, COUNT(CASE WHEN (addressLine1 IS NOT NULL AND addressLine2 IS NULL) OR (addressLine1 IS NULL AND addressLine2 IS NOT NULL) THEN 1 END) AS Pocet_zakaznikov
                FROM customers
                ORDER BY Typ_adries ASC;




